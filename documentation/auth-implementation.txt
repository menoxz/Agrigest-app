# Documentation: Mise en place de l'authentification Laravel avec Breeze

## Introduction
Ce document explique comment l'authentification a été mise en place dans ce projet Laravel en utilisant le package Laravel Breeze.

## Étapes d'implémentation

### 1. Modifications du Dockerfile

Pour prendre en charge l'authentification, nous avons modifié le Dockerfile pour:
- Installer Node.js et NPM, nécessaires pour compiler les assets frontend
- Configurer Git pour résoudre les problèmes de propriété dans le conteneur
- Installer Laravel Breeze via Composer avec des options spécifiques pour éviter les erreurs
- Configurer Breeze avec le stack Blade (interface utilisateur traditionnelle)
- Compiler les assets frontend avec NPM

Voici les lignes ajoutées au Dockerfile:
```
# Installation des dépendances système
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    nodejs \
    npm

# Attribution des permissions et configuration de Git pour le conteneur
RUN chown -R www-data:www-data /var/www
RUN git config --global --add safe.directory /var/www

# Installation de Laravel Breeze et configuration de l'authentification
# On installe Breeze APRÈS avoir configuré les routes pour éviter les erreurs
RUN composer require laravel/breeze --dev --no-scripts
# On génère les contrôleurs d'authentification et les vues
RUN php artisan breeze:install blade --no-interaction
RUN npm install
RUN npm run build
# On exécute les scripts composer post-install après avoir tout configuré
RUN composer dump-autoload
```

#### 1.1 Résolution des problèmes courants

Lors de l'installation de Laravel Breeze dans un environnement Docker, plusieurs problèmes peuvent survenir :

1. **Problème de propriété Git** : Git refuse d'utiliser le répertoire si les propriétés ne sont pas correctes.
   - Solution : Nous avons ajouté `RUN git config --global --add safe.directory /var/www` pour dire à Git de considérer ce répertoire comme sûr.

2. **Erreur d'installation des contrôleurs** : Les routes d'authentification font référence à des contrôleurs qui n'existent pas encore.
   - Solution : Nous utilisons l'option `--no-scripts` lors de l'installation de Breeze pour éviter d'exécuter les scripts post-install à ce stade.
   - Nous exécutons `composer dump-autoload` après avoir tout configuré pour finaliser l'installation.

3. **Problèmes d'interaction** : Les invites d'installation peuvent bloquer le processus de build Docker.
   - Solution : Utilisation de l'option `--no-interaction` lors de l'installation de Breeze.

### 2. Dépannage après déploiement

Après le déploiement de l'application dans Docker, nous avons rencontré une erreur :
```
Illuminate\Contracts\Container\BindingResolutionException
Target class [App\Http\Controllers\Auth\RegisteredUserController] does not exist.
```

#### 2.1 Cause du problème
Cette erreur s'est produite car le Dockerfile a installé Breeze, mais les fichiers n'ont pas été correctement synchronisés entre le conteneur et le système hôte en raison du montage de volume dans docker-compose.yml.

#### 2.2 Solution appliquée
Nous avons exécuté la commande d'installation de Breeze directement dans le conteneur en cours d'exécution :
```
docker exec -it agrigest-app php artisan breeze:install blade
```

Cette opération a :
1. Généré tous les contrôleurs d'authentification manquants dans `app/Http/Controllers/Auth/`
2. Créé les vues Blade nécessaires dans `resources/views/auth/`
3. Configuré les routes d'authentification correctement
4. Installé et compilé les dépendances frontend (JS/CSS)

Après cette installation, nous avons nettoyé les caches pour s'assurer que toutes les modifications soient prises en compte :
```
docker exec -it agrigest-app php artisan cache:clear
docker exec -it agrigest-app php artisan view:clear
docker exec -it agrigest-app php artisan config:clear
```

### 3. Configuration supplémentaire effectuée

Après l'installation de Breeze via le Dockerfile, nous avons mis en place les éléments suivants :

#### 3.1 Création de la vue Dashboard
Nous avons créé un dossier `resources/views/dashboard` et une vue `index.blade.php` pour afficher le tableau de bord des utilisateurs connectés :
```
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Tableau de bord') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    {{ __("Vous êtes connecté!") }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
```

#### 3.2 Configuration des routes
Nous avons configuré les routes d'authentification dans deux fichiers :

##### `routes/web.php` :
```php
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\ProfileController;
use App\Http\Controllers\DashboardController;

Route::get('/', function () {
    return view('welcome');
});

Route::get('/dashboard', function () {
    return view('dashboard.index');
})->middleware(['auth', 'verified'])->name('dashboard');

Route::middleware('auth')->group(function () {
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

require __DIR__.'/auth.php';
```

##### `routes/auth.php` :
Ce fichier contient toutes les routes spécifiques à l'authentification :
- Routes pour invités (connexion, inscription, récupération de mot de passe)
- Routes pour utilisateurs authentifiés (vérification email, déconnexion, etc.)

#### 3.3 Mise en place d'une politique de mot de passe fort

Nous avons implémenté une règle de validation personnalisée pour assurer des mots de passe forts :

1. **Création de la règle** : Nous avons créé une classe `StrongPassword` dans `app/Rules/StrongPassword.php` :
```php
<?php

namespace App\Rules;

use Illuminate\Contracts\Validation\Rule;

class StrongPassword implements Rule
{
    public function passes($attribute, $value)
    {
        // Vérification de la longueur minimale (8 caractères)
        if (strlen($value) < 8) {
            return false;
        }

        // Vérification qu'il y a au moins un chiffre
        if (!preg_match('/[0-9]/', $value)) {
            return false;
        }

        return true;
    }

    public function message()
    {
        return 'Le mot de passe doit contenir au moins 8 caractères et au moins un chiffre.';
    }
}
```

2. **Application de la règle** : Cette règle est appliquée dans tous les formulaires liés aux mots de passe :
   - Inscription d'utilisateur (`RegisteredUserController`)
   - Réinitialisation de mot de passe (`NewPasswordController`)
   - Changement de mot de passe dans le profil (`PasswordController`)

3. **Critères du mot de passe fort** :
   - Longueur minimale : 8 caractères
   - Doit contenir au moins un chiffre

### 4. Fonctionnalités d'authentification incluses

L'installation de Laravel Breeze avec le stack Blade fournit:

- Inscription d'utilisateurs (/register)
- Connexion utilisateur (/login)
- Réinitialisation de mot de passe (/forgot-password)
- Confirmation d'email
- Vérification d'email
- Middleware d'authentification pour protéger les routes
- Profil utilisateur (/profile)
- Tableau de bord (/dashboard) protégé par authentification
- Politique de mot de passe fort (personnalisée)

### 5. Structure des fichiers créés

Breeze génère automatiquement:
- Controllers d'authentification dans `app/Http/Controllers/Auth/`
- Vues Blade pour l'authentification dans `resources/views/auth/`
- Configuration des routes dans `routes/auth.php`
- Middleware d'authentification dans `app/Http/Middleware/`
- Modèle User (si non existant)
- Migrations pour les tables utilisateurs et mots de passe

En plus, nous avons créé :
- La règle de validation `app/Rules/StrongPassword.php`

### 6. Personnalisation possible

Pour personnaliser l'authentification, vous pouvez:
- Modifier les vues dans `resources/views/auth/`
- Ajouter des champs au formulaire d'inscription en modifiant:
  - La migration de la table users
  - Le modèle User
  - Le RegisteredUserController
  - La vue d'inscription
- Modifier les règles de validation dans les controllers Auth
- Personnaliser les emails envoyés dans `app/Notifications/`
- Renforcer davantage la politique de mot de passe en ajoutant des critères supplémentaires à la règle `StrongPassword`

### 7. Utilisation après installation

- Protéger une route: utiliser le middleware `auth` dans les routes
  ```php
  Route::middleware(['auth'])->group(function () {
      Route::get('/dashboard', [DashboardController::class, 'index']);
  });
  ```
- Vérifier si un utilisateur est connecté: `Auth::check()`
- Accéder à l'utilisateur connecté: `Auth::user()`
- Déconnecter l'utilisateur: `Auth::logout()`

### 8. Reconstruction après modifications

Si vous modifiez les assets frontend (JS/CSS):
```
npm run build
```

## Utilisation

1. Accéder à l'application sur http://localhost:8000
2. Créer un compte via la page d'inscription (/register)
   - Le mot de passe doit contenir au moins 8 caractères et au moins un chiffre
3. Après connexion, vous serez redirigé vers le tableau de bord
4. Vous pouvez modifier votre profil dans la page profil (/profile)
5. Pour protéger vos propres routes, utilisez le middleware 'auth'

## Conclusion

Laravel Breeze fournit un système d'authentification complet et sécurisé que vous pouvez facilement personnaliser selon les besoins du projet. L'installation via Docker permet de garantir que tous les développeurs travaillent dans un environnement cohérent.

En cas de problèmes similaires à l'avenir, la solution est généralement d'exécuter `php artisan breeze:install blade` directement dans le conteneur en cours d'exécution, puis de nettoyer tous les caches.
