# Documentation: Mise en place de l'authentification Laravel avec Breeze

## Introduction
Ce document explique comment l'authentification a été mise en place dans ce projet Laravel en utilisant le package Laravel Breeze.

## Étapes d'implémentation

### 1. Approche d'installation

Après plusieurs tentatives et problèmes rencontrés, nous avons adopté une approche en deux temps :

1. **Création d'un Dockerfile sans installation de Breeze**
   - Le Dockerfile ne contient plus l'installation de Breeze car cela provoquait des erreurs en mode non-interactif.
   - Seuls les prérequis (PHP, Node.js, NPM) sont installés dans l'image Docker.

2. **Installation post-déploiement**
   - Breeze est installé manuellement après le démarrage des conteneurs.
   - Cette approche évite les problèmes liés au mode non-interactif et aux contrôleurs manquants.

Voici le Dockerfile sans l'installation de Breeze :
```
FROM php:8.2-fpm

# Installation des dépendances système
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    nodejs \
    npm

# Nettoyage du cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Installation des extensions PHP
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

# Installation de Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Définition du répertoire de travail
WORKDIR /var/www

# Copie des fichiers du projet
COPY . /var/www

# Attribution des permissions et configuration de Git pour le conteneur
RUN chown -R www-data:www-data /var/www
RUN git config --global --add safe.directory /var/www

# Note: On n'installe PAS Breeze dans le Dockerfile car cela crée des problèmes en mode non-interactif
# Breeze sera installé via une commande après le démarrage du conteneur

# Exposition du port 9000
EXPOSE 9000

# Démarrage de PHP-FPM
CMD ["php-fpm"]
```

### 2. Commandes d'installation post-déploiement

Une fois les conteneurs démarrés, Breeze est installé avec les commandes suivantes :

```bash
# Installation de Laravel Breeze
docker exec -it agrigest-app composer require laravel/breeze --dev

# Installation des fichiers Breeze avec l'interface Blade
docker exec -it agrigest-app php artisan breeze:install blade --no-interaction

# Installation des dépendances npm et compilation des assets
docker exec -it agrigest-app npm install
docker exec -it agrigest-app npm run build

# Configuration de la base de données
docker exec -it agrigest-app php artisan migrate

# Nettoyage des caches
docker exec -it agrigest-app php artisan optimize:clear
```

### 3. Configuration supplémentaire effectuée

Après l'installation de Breeze via les commandes post-déploiement, nous avons mis en place les éléments suivants :

#### 3.1 Création de la vue Dashboard
Nous avons créé un dossier `resources/views/dashboard` et une vue `index.blade.php` pour afficher le tableau de bord des utilisateurs connectés :
```
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Tableau de bord') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    {{ __("Vous êtes connecté!") }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
```

#### 3.2 Configuration des routes
Nous avons configuré les routes d'authentification dans deux fichiers :

##### `routes/web.php` :
```php
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\ProfileController;
use App\Http\Controllers\DashboardController;

Route::get('/', function () {
    return view('welcome');
});

Route::get('/dashboard', function () {
    return view('dashboard.index');
})->middleware(['auth', 'verified'])->name('dashboard');

Route::middleware('auth')->group(function () {
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

require __DIR__.'/auth.php';
```

##### `routes/auth.php` :
Ce fichier contient toutes les routes spécifiques à l'authentification :
- Routes pour invités (connexion, inscription, récupération de mot de passe)
- Routes pour utilisateurs authentifiés (vérification email, déconnexion, etc.)

#### 3.3 Mise en place d'une politique de mot de passe fort

Nous avons implémenté une règle de validation personnalisée pour assurer des mots de passe forts :

1. **Création de la règle** : Nous avons créé une classe `StrongPassword` dans `app/Rules/StrongPassword.php` :
```php
<?php

namespace App\Rules;

use Illuminate\Contracts\Validation\Rule;

class StrongPassword implements Rule
{
    public function passes($attribute, $value)
    {
        // Vérification de la longueur minimale (8 caractères)
        if (strlen($value) < 8) {
            return false;
        }

        // Vérification qu'il y a au moins un chiffre
        if (!preg_match('/[0-9]/', $value)) {
            return false;
        }

        return true;
    }

    public function message()
    {
        return 'Le mot de passe doit contenir au moins 8 caractères et au moins un chiffre.';
    }
}
```

2. **Application de la règle** : Cette règle est appliquée dans tous les formulaires liés aux mots de passe :
   - Inscription d'utilisateur (`RegisteredUserController`)
   - Réinitialisation de mot de passe (`NewPasswordController`)
   - Changement de mot de passe dans le profil (`PasswordController`)

3. **Critères du mot de passe fort** :
   - Longueur minimale : 8 caractères
   - Doit contenir au moins un chiffre

### 4. Fonctionnalités d'authentification incluses

L'installation de Laravel Breeze avec le stack Blade fournit:

- Inscription d'utilisateurs (/register)
- Connexion utilisateur (/login)
- Réinitialisation de mot de passe (/forgot-password)
- Confirmation d'email
- Vérification d'email
- Middleware d'authentification pour protéger les routes
- Profil utilisateur (/profile)
- Tableau de bord (/dashboard) protégé par authentification
- Politique de mot de passe fort (personnalisée)

### 5. Structure des fichiers créés

Breeze génère automatiquement:
- Controllers d'authentification dans `app/Http/Controllers/Auth/`
- Vues Blade pour l'authentification dans `resources/views/auth/`
- Configuration des routes dans `routes/auth.php`
- Middleware d'authentification dans `app/Http/Middleware/`
- Modèle User (si non existant)
- Migrations pour les tables utilisateurs et mots de passe

En plus, nous avons créé :
- La règle de validation `app/Rules/StrongPassword.php`
- Le document d'installation `documentation/installation.txt`

### 6. Personnalisation possible

Pour personnaliser l'authentification, vous pouvez:
- Modifier les vues dans `resources/views/auth/`
- Ajouter des champs au formulaire d'inscription en modifiant:
  - La migration de la table users
  - Le modèle User
  - Le RegisteredUserController
  - La vue d'inscription
- Modifier les règles de validation dans les controllers Auth
- Personnaliser les emails envoyés dans `app/Notifications/`
- Renforcer davantage la politique de mot de passe en ajoutant des critères supplémentaires à la règle `StrongPassword`

### 7. Utilisation après installation

- Protéger une route: utiliser le middleware `auth` dans les routes
  ```php
  Route::middleware(['auth'])->group(function () {
      Route::get('/dashboard', [DashboardController::class, 'index']);
  });
  ```
- Vérifier si un utilisateur est connecté: `Auth::check()`
- Accéder à l'utilisateur connecté: `Auth::user()`
- Déconnecter l'utilisateur: `Auth::logout()`

### 8. Reconstruction après modifications

Si vous modifiez les assets frontend (JS/CSS):
```
npm run build
```

## Utilisation

1. Accéder à l'application sur http://localhost:8000
2. Créer un compte via la page d'inscription (/register)
   - Le mot de passe doit contenir au moins 8 caractères et au moins un chiffre
3. Après connexion, vous serez redirigé vers le tableau de bord
4. Vous pouvez modifier votre profil dans la page profil (/profile)
5. Pour protéger vos propres routes, utilisez le middleware 'auth'

## Résolution des problèmes courants

Si vous rencontrez des problèmes d'authentification :

1. **Les contrôleurs n'existent pas**
   - Vérifiez que Breeze a été correctement installé
   - Réexécutez la commande `php artisan breeze:install blade --no-interaction`

2. **Erreurs de vue ou de template**
   - Nettoyez le cache avec `php artisan view:clear`
   - Vérifiez que les vues Blade sont correctement copiées

3. **Problèmes de middleware**
   - Rafraîchissez les caches de l'application avec `php artisan optimize:clear`

## Conclusion

Pour résoudre définitivement les problèmes d'installation de Breeze, nous avons :

1. Retiré l'installation de Breeze du Dockerfile
2. Adopté une approche post-déploiement en exécutant les commandes manuellement après le démarrage des conteneurs
3. Documenté le processus d'installation complet dans `documentation/installation.txt`

Cette approche évite les erreurs liées au mode non-interactif et garantit une installation correcte et reproductible de l'authentification Laravel Breeze.
